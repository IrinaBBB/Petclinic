@page "/pet/add"
@page "/pet/edit/{Id:int}"

@using Petclinic.Models.PetType
@inject IPetTypeRepository _petTypeRepository
@inject IPetRepository _petRepository
@inject NavigationManager _navigationManager

<div style="max-width: 800px;">
    <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
        <FluentValidationValidator />
        <MudCard>
            <MudCardContent>
                <h2>
                    <span>@Title a Pet</span> <img src="img/pawprint-primary.svg" class="header-decoration" alt="paw-logo" />
                </h2>

                @* Pet Name *@
                <MudTextField Label="Pet Name" @bind-Value="_model.Name" For="@(() => _model.Name)" />

                @* Pet Type *@
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="_model.PetTypeId" For="@(() => _model.PetTypeId)" T="int" Label="Pet Type" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var petType in PetTypes)
                        {
                            <MudSelectItem Value="@petType.Id">@petType.Name.ToUpper()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <ValidationMessage For="() => _model.PetType" />

                @* Pet Sex *@
                <div class="d-flex mt-2">
                    <MudRadioGroup @bind-SelectedOption="_model.Sex" For="@(() => _model.Sex)" T="string" RequiredError="Account type is required!">
                        <MudRadio Option="@("male")">Male</MudRadio>
                        <MudRadio Option="@("female")">Female</MudRadio>
                        <MudRadio Option="@("unknown")">Unknown</MudRadio>
                    </MudRadioGroup>
                </div>
                <ValidationMessage For="() => _model.Sex" />


                @* Pet Weight *@
                <MudItem xs="12" sm="6" md="4">
                    <MudNumericField @bind-Value="_model.Weight" For="@(() => _model.Weight)" Label="Weight" AdornmentColor="Color.Primary" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="Kg" HideSpinButtons="true" />
                </MudItem>

                @* Date of Birth *@
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="_model.DateOfBirth"
                                   For="@(() => _model.DateOfBirth)"
                                   MaxDate="@(DateTime.Now)"
                                   MinDate="@(DateTime.Now.AddYears(-100))"
                                   PickerVariant="PickerVariant.Dialog"
                                   Label="Pet's Date of Birth"
                                   AdornmentColor="Color.Primary" />
                </MudItem>

                @* Additional Data *@
                <MudTextField Label="Additional Data" Lines="6"
                              @bind-Value="_model.AdditionalData" For="@(() => _model.AdditionalData)" />
            </MudCardContent>
            

            <MudCardActions>
                <MudButton Variant="Variant.Filled" Class="ml-auto" Link="/">Back To List</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-4">@Title</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }


    private string Title { get; set; } = "Add";
    private IEnumerable<PetTypeDto> PetTypes { get; set; }
    private PetDto _model = new();


    protected override async Task OnInitializedAsync()
    {
        PetTypes = _petTypeRepository.GetAllPetTypes();

        if (Id != null)
        {
            Title = "Update";
            _model = await _petRepository.GetPet(Id.Value);
        }
        else
        {
            _model = new PetDto();
        }
    }

    private async Task OnValidSubmit()
    {
        if (_model.Id != 0 && Title == "Update")
        {
            var updatedResult = await _petRepository.UpdatePet(_model.Id, _model);
            if (updatedResult != null)
            {
                _navigationManager.NavigateTo($"pet/edit/{_model.Id}");
                await _jsRunTime.SweetAlertSuccess($"Pet with Name {updatedResult.Name} is Updated");
            }
            else
            {
                await _jsRunTime.ToastrError("The Pet has not been Updated");
            }
        }
        else
        {
            var createResult = await _petRepository.CreatePet(_model);
            if (createResult != null)
            {
                _navigationManager.NavigateTo("/");
                await _jsRunTime.SweetAlertSuccess($"Pet with Name {createResult.Name} is Created");
            }
            else
            {
                await _jsRunTime.ToastrError("The Pet has not been Created");
            }
        }
    }
}